//DEFINED GRAMMAR


program -> declaration* EOF;


declaration -> funDecl
            | varDecl
            | statement ;

statement -> exprStmt
           | printStmt;
           | block ;
           | ifStmt;
           | whileStmt;
           | breakStmt;
           | returnStmt;

block       -> "{" declaration* "}" ;
exprStmt    -> expression ";" ;
printStmt   -> "print" expression ";" ;
ifStmt      -> "if" "(" expression ")" statement ( "else" statement )? ;
whileStmt   -> "while" "(" expression ")" statement ;
returnStmt  -> "return" expression? ";" 

expression  -> assignment;
assignment  -> IDENTIFIER "=" assignment 
            | logic_or;
logic_or    -> logic_and ("or" logic_and)*;
logic_and   -> equality ("and" equality)*;
conditional -> equality
equality    -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison  -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        -> factor ( ( "-" | "+" ) factor )* ;
factor      -> unary ( ( "/" | "*" ) unary )* ;
unary       -> ( "!" | "-" | "--" | "++" ) unary | call
            | postfix ;
call        -> primary('('arguements?')')*;
arguements  -> expression (',' expression)*;
postfix     -> primary ( "--" | ++" )* ;
primary     -> NUMBER | STRING | "true" | "false" | "nil"
            | "(" expression ")"
            | IDENTIFIER ;
            --- Error productions... ---
            | ( "!=" | "==" ) equality
            | ( ">" | ">=" | "<" | "<=" ) comparison
            | ( "+" ) term
            | ( "/" | "*" ) factor ;

